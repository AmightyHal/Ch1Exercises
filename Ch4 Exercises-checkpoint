{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "14575d49-677b-4a98-92da-1f1e09df5418",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Ch4 Exercises\n",
    "\n",
    "# Algo Workbench 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a209a62f-193d-4065-b3ff-2664fed05d21",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number: 11\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your product is: 110.0\n",
      "The product has reached over 100\n"
     ]
    }
   ],
   "source": [
    "## 1.\n",
    "# state the variable\n",
    "product = 0\n",
    "\n",
    "# use a while loop to prompt for our product and multiply our product by 10\n",
    "while product < 100:\n",
    "    number = float(input(\"Enter a number:\"))\n",
    "    product = number * 10\n",
    "    print(f\"Your product is: {product}\")\n",
    "    \n",
    "print(\"The product has reached over 100\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aa10cf90-c656-433f-8e3d-c6618a00f66b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the first number:  1\n",
      "Enter the second number:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of 1.0 and 3.0 is: 4.0\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you wish to preform this action again? (yes/no):  no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exiting the program.\n"
     ]
    }
   ],
   "source": [
    "## 2.\n",
    "# loop that asks for inputs and prompts to repeat\n",
    "while True:\n",
    "    #state variables\n",
    "    num1 = float(input(\"Enter the first number: \"))\n",
    "    \n",
    "    num2 = float(input(\"Enter the second number: \"))\n",
    "    # add numbers\n",
    "    sum_num = num1 + num2\n",
    "    \n",
    "    print(f\"The sum of {num1} and {num2} is: {sum_num}\")\n",
    "    #ask the user to repeat\n",
    "    rep = input(\"Do you wish to preform this action again? (yes/no): \")\n",
    "    if rep.lower() != \"yes\":\n",
    "        break\n",
    "        \n",
    "print(\"Exiting the program.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2017498d-baee-4d44-8662-3560957e5d19",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# coding exercises"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb9abf3d-db1a-44c8-9ae7-dd76f42e0b19",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is day 1\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter bugs collected today:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is day 2\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter bugs collected today:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is day 3\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter bugs collected today:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is day 4\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter bugs collected today:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today is day 5\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter bugs collected today:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your total bugs for 5 days is: 5\n"
     ]
    }
   ],
   "source": [
    "## 1.\n",
    "# state variables\n",
    "total_bugs = 0\n",
    "\n",
    "# track bugs collected over 5 days using a range of 5 days\n",
    "for day in range(1,6):\n",
    "    print(f\"Today is day {day}\")\n",
    "    # get input for bugs each day\n",
    "    bugs_collected = int(input(\"Enter bugs collected today: \"))\n",
    "    # store bugs collected in our total\n",
    "    total_bugs += bugs_collected\n",
    "\n",
    "# display total bugs\n",
    "print(f\"Your total bugs for 5 days is: {total_bugs}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "87b50032-4e9c-48ae-a38b-b11fde37fd77",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What speed were you going? 30\n",
      "How long were you traveling? 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hour\tDistance Traveled\n",
      "-----------------------\n",
      "1\t30\n",
      "2\t60\n",
      "3\t90\n",
      "4\t120\n"
     ]
    }
   ],
   "source": [
    "## 4.\n",
    "# Prompt user for vehicle speed and time driven\n",
    "spd = int(input(\"What speed were you going?\"))\n",
    "hours= int(input(\"How long were you traveling?\"))\n",
    "\n",
    "# Table header\n",
    "print(\"Hour\\tDistance Traveled\")\n",
    "print(\"-----------------------\")\n",
    "\n",
    "#calcute and display distance and hours\n",
    "for hour in range(1, hours + 1):\n",
    "    distance = spd * hour\n",
    "    print(f\"{hour}\\t{distance}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cda2a3ad-4d6b-424e-8a7a-c66615c1cda9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*******\n",
      "******\n",
      "*****\n",
      "****\n",
      "***\n",
      "**\n",
      "*\n"
     ]
    }
   ],
   "source": [
    "## 13\n",
    "# define number of rows for the pattern\n",
    "rows = 7\n",
    "# loop to repeat 7 times\n",
    "for i in range(rows, 0, -1):\n",
    "    # loop to print * for each of our lines\n",
    "    for j in range(0, i):\n",
    "        #printing without going to a new line\n",
    "        print(\"*\", end='')\n",
    "    print()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c8802edf-350f-4a68-aef7-a64145a738b7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##\n",
      "# #\n",
      "#  #\n",
      "#   #\n",
      "#    #\n",
      "#     #\n"
     ]
    }
   ],
   "source": [
    "## 14\n",
    "# create a loop to run 7 times\n",
    "for i in range(1,7):\n",
    "    # set the spaces to be multiplied by row number - 1\n",
    "    print(\"#\" + \" \" * (i-1) + \"#\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a233406-288e-4ec5-9a60-49fb4fc74280",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
